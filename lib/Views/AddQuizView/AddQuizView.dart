import 'dart:math';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:modal_progress_hud_nsn/modal_progress_hud_nsn.dart';import 'package:provider/provider.dart';import '../../components/Methods/AlertDialog.dart';import '../../components/Methods/btm_alert.dart';import '../../components/Models/QuizModel.dart';import '../../components/Providers/AddQuizProvider.dart';import '../../components/Providers/FinishedQuizProvider.dart';import '../../components/Widgets/CustomAppBar.dart';import '../../components/Widgets/GrediantBoxWidget.dart';import 'FinalQuizCodeView.dart';class AddQuizView extends StatefulWidget {  const AddQuizView({Key? key,}) : super(key: key);  @override  State<AddQuizView> createState() => _AddQuizViewState();}class _AddQuizViewState extends State<AddQuizView> {  TextEditingController questionController = TextEditingController();  GlobalKey<FormState> formKey = GlobalKey();  TextEditingController answerController = TextEditingController();  TextEditingController subjectController = TextEditingController();  int correctAnswerIndex = -1;  String? correctAnswer;  String subject = '';  List<String> answers = [];  List<String> answersList = [];  List<QuestionsModel> questionList = [];  bool isLoading = false;  void _addAnswer() {    setState(() {      answers.add(answerController.text);      answerController.clear();    });  }  Widget buildQuestionField() {    return TextFormField(      cursorColor: Colors.white,      style: const TextStyle(        color: Colors.white,        fontWeight: FontWeight.bold,      ),      decoration: const InputDecoration(        enabledBorder:            UnderlineInputBorder(borderSide: BorderSide(color: Colors.white)),      ),      validator: (question) {        if (question == '' || question == null) {          return 'Question cannot be empty';        } else {          return null;        }      },      controller: questionController,    );  }  Widget buildAnswerField() {    return TextFormField(      style: const TextStyle(        color: Colors.white,        fontWeight: FontWeight.bold,      ),      decoration: const InputDecoration(        enabledBorder:            UnderlineInputBorder(borderSide: BorderSide(color: Colors.white)),      ),      validator: (answer) {        if (answer == '' || answer == null) {          return 'Answer cannot be empty';        } else {          return null;        }      },      controller: answerController,    );  }  Widget buildAnswerList() {    return Column(      children: List<Widget>.generate(        answers.length,        (index) {          return Padding(            padding: const EdgeInsets.all(8.0),            child: Container(              decoration: BoxDecoration(                color: Colors.white,                borderRadius: BorderRadius.circular(16),              ),              child: ListTile(                textColor: const Color(0xffFF6AC2),                title: Text(answers[index]),                trailing: IconButton(                  onPressed: () {                    setState(() {                      correctAnswerIndex = -1;                      correctAnswer = null;                      answers.remove(answers[index]);                    });                  },                  icon: const Icon(                    Icons.remove,                    color: Color(0xffFF6AC2),                  ),                ),                leading: Radio<int>(                  value: index,                  groupValue: correctAnswerIndex,                  onChanged: (value) {                    setState(() {                      correctAnswerIndex = value!;                      correctAnswer = answers[correctAnswerIndex].toString();                    });                  },                ),              ),            ),          );        },      ),    );  }  @override  Widget build(BuildContext context) {    Random random = Random();    final addQuizProvider = Provider.of<AddQuizProvider>(context);    final finishedQuizProvider = Provider.of<FinishedQuizProvider>(context);    return SafeArea(      child: ModalProgressHUD(       inAsyncCall: isLoading,       child: Scaffold(        body: GradientBoxWidget(          child: Form(            key: formKey,            child: Padding(              padding: const EdgeInsets.all(8.0),              child: SingleChildScrollView(                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: <Widget>[                    Padding(                      padding: const EdgeInsets.only(top: 10, bottom: 16),                      child: CustomAppBar(                        startIconOnTap: () {                          Navigator.pop(context);                        },                        startIcon: const Icon(                          Icons.arrow_back_ios,                          size: 20,                          color: Colors.white,                        ),                        ShowIcons: true,                        isBigLogo: false,                      ),                    ),                    Center(                        child: Padding(                      padding: const EdgeInsets.only(top: 5,bottom: 30),                      child: Text(                        'Total Added Questions : ${questionList.length}',                        style: const TextStyle(                          decoration: TextDecoration.underline,                            color: Colors.white,                            fontWeight: FontWeight.bold,                            fontSize: 18),                      ),                    )),                    const Text(                      'Enter a Question:',                      style: TextStyle(color: Colors.white),                    ),                    buildQuestionField(),                    const SizedBox(height: 16.0),                    const Text(                      'Enter Answers:',                      style: TextStyle(color: Colors.white),                    ),                    Row(                      children: <Widget>[                        Expanded(                          child: buildAnswerField(),                        ),                        IconButton(                          icon: const Icon(                            Icons.add,                            color: Colors.white,                          ),                          onPressed: () {                            final form = formKey.currentState;                            if (form != null && form.validate()) {                              _addAnswer();                            }                          },                        ),                      ],                    ),                    const SizedBox(height: 16.0),                    if (correctAnswer != null)                      Text(                        'Question\'s correct answer is : $correctAnswer',                        maxLines: 2,                        style: const TextStyle(color: Colors.white),                      ),                    if (correctAnswerIndex == -1 && answers.isNotEmpty)                      const Center(                        child: Text(                          'Select the correct answer',                          style: TextStyle(color: Colors.white),                        ),                      ),                    buildAnswerList(),                    const SizedBox(height: 16.0),                    Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        ElevatedButton(                          style: ElevatedButton.styleFrom(                              backgroundColor:                                  const Color(0xff5D12D2).withOpacity(0.9)),                          onPressed: () {                            final form = formKey.currentState;                            if (questionController.text != '') {                              if (correctAnswerIndex == -1) {                                showBtmAlert(context, 'Please select the correct answer');                              } else if (answers.length < 2) {                                showBtmAlert(context, 'You need to add two answers or more');                              } else {                                List<String> questionAnswers = List.from(answers); // Create a separate list                                questionList.add(QuestionsModel(                                  question: questionController.text,                                  answers: questionAnswers, // Add the separate list to QuestionsModel                                  correctAnswer: correctAnswer!,                                ));                                showBtmAlert(context, 'Question added successfully');                                setState(() {                                  correctAnswerIndex = -1;                                  correctAnswer = null;                                  questionController.clear();                                  answerController.clear();                                  answers.clear();                                });                              }                            } else {                              showBtmAlert(context, 'Please add a question');                            }                          },                          child: const Row(                            children: [                              Icon(Icons.add),                              Text('Add another Question'),                            ],                          ),                        ),                        ElevatedButton(                          style: ElevatedButton.styleFrom(                              backgroundColor:                                  const Color(0xffFF6AC2).withOpacity(0.7)),                          onPressed: () {                            showAlertDialog(context: context, subjectController: subjectController, onChanged: (value ) {subject = value;                            }, onContinue: ()async {                              setState(() {                                isLoading = true;                              });                              int quizId = random.nextInt(900000) + 10000;                              final form = formKey.currentState;                              try {                                if (questionList.length < 1) {                                  showBtmAlert(context, 'You Must Have At Least One Question');                                }else {                                  await addQuizProvider.addQuiz(quizId.toString(), questionList,subject);                                  await finishedQuizProvider.fetchFinishedQuizzes(teacherID: FirebaseAuth.instance.currentUser!.uid);                                  setState(() {questionList.clear();});                                  Navigator.push(context, MaterialPageRoute(builder: (context)=> FinalQuizCodeView(quizCode: quizId.toString(),)));                                }                              }catch(e){                                showBtmAlert(context, e.toString());                              } finally {                                setState(() {                                  isLoading = false;                                });                              }                            }, title: 'Quiz Subject', subTitle: 'Add quiz Subject');                          },                          child: const Text('Submit Quiz'),                        ),                      ],                    ),                  ],                ),              ),            ),          ),        ),      )),    );  }}